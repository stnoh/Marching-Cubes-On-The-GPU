
#pragma kernel CSMain

struct Vert
{
	float4 position;
	float3 normal;
};

SamplerState _LinearClamp;

float _Target;

int _Width, _Height, _Depth, _Border;

StructuredBuffer<int> _TriangleConnectionTable;

StructuredBuffer<int> _CubeEdgeFlags;

StructuredBuffer<uint> _Voxels;

Texture3D<float3> _Normals;

RWStructuredBuffer<Vert> _Buffer;

// edgeConnection lists the index of the endpoint vertices for each of the 12 edges of the cube
static int2 edgeConnection[12] =
{
	int2(0,1), int2(1,2), int2(2,3), int2(3,0), int2(4,5), int2(5,6), int2(6,7), int2(7,4), int2(0,4), int2(1,5), int2(2,6), int2(3,7)
};

// edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube
static float3 edgeDirection[12] =
{
	float3(1.0f, 0.0f, 0.0f),float3(0.0f, 1.0f, 0.0f),float3(-1.0f, 0.0f, 0.0f),float3(0.0f, -1.0f, 0.0f),
	float3(1.0f, 0.0f, 0.0f),float3(0.0f, 1.0f, 0.0f),float3(-1.0f, 0.0f, 0.0f),float3(0.0f, -1.0f, 0.0f),
	float3(0.0f, 0.0f, 1.0f),float3(0.0f, 0.0f, 1.0f),float3( 0.0f, 0.0f, 1.0f),float3(0.0f,  0.0f, 1.0f)
};

// vertexOffset lists the positions, relative to vertex0, of each of the 8 vertices of a cube
static float3 vertexOffset[8] =
{
	float3(0, 0, 0),float3(1, 0, 0),float3(1, 1, 0),float3(0, 1, 0),
	float3(0, 0, 1),float3(1, 0, 1),float3(1, 1, 1),float3(0, 1, 1)
};

// "byte"
float GetVoxelData(int x, int y, int z)
{
	int index = (x)+(y)* _Width + (z)* _Width * _Height;
	int id = index / 4;
	int id_mod = index % 4;

	uint val_int = _Voxels[id];

	switch (id_mod) {
	case 0: val_int = (val_int) & 0xff; break;
	case 1: val_int = (val_int >> 8) & 0xff; break;
	case 2: val_int = (val_int >> 16) & 0xff; break;
	case 3: val_int = (val_int >> 24) & 0xff; break;
	default: val_int = (val_int) & 0xff; break;
	}

	float val = (float)val_int;

	return (val - 127.0f) / 127.0f;
}

void FillCube(int x, int y, int z, out float cube[8])
{
	cube[0] = GetVoxelData(x  , y  , z  );
	cube[1] = GetVoxelData(x+1, y  , z  );
	cube[2] = GetVoxelData(x+1, y+1, z  );
	cube[3] = GetVoxelData(x  , y+1, z  );

	cube[4] = GetVoxelData(x  , y  , z+1);
	cube[5] = GetVoxelData(x+1, y  , z+1);
	cube[6] = GetVoxelData(x+1, y+1, z+1);
	cube[7] = GetVoxelData(x  , y+1, z+1);
}

// GetOffset finds the approximate point of intersection of the surface
// between two points with the values v1 and v2
float GetOffset(float v1, float v2)
{
	float delta = v2 - v1;
	return (delta == 0.0f) ? 0.5f : (_Target - v1) / delta;
}

Vert CreateVertex(float3 position, float3 centre, float3 size)
{
	Vert vert;
	vert.position = float4(position - centre, 1.0);

	float3 uv = position / size;
	vert.normal = _Normals.SampleLevel(_LinearClamp, uv, 0);

	return vert;
}

[numthreads(8, 8, 8)]
void CSMain(int3 id : SV_DispatchThreadID)
{
	//Dont generate verts at the edge as they dont have 
	//neighbours to make a cube from and the normal will 
	//not be correct around border.
	if (id.x >= _Width - 1 - _Border) return;
	if (id.y >= _Height - 1 - _Border) return;
	if (id.z >= _Depth - 1 - _Border) return;

	float3 pos = float3(id);
	float3 centre = float3(_Width, 0, _Depth) / 2.0;

	float cube[8];
	FillCube(id.x, id.y, id.z, cube); // bring the volume data to cube[8]

	int i = 0;
	int flagIndex = 0;
	float3 edgeVertex[12];

	//Find which vertices are inside of the surface and which are outside
	for (i = 0; i < 8; i++)
		if (cube[i] <= _Target) flagIndex |= 1 << i;

	//Find which edges are intersected by the surface
	int edgeFlags = _CubeEdgeFlags[flagIndex];

	// no connections, return
	if (edgeFlags == 0) return;

	//Find the point of intersection of the surface with each edge
	for (i = 0; i < 12; i++)
	{
		//if there is an intersection on this edge
		if ((edgeFlags & (1 << i)) != 0)
		{
			float offset = GetOffset(cube[edgeConnection[i].x], cube[edgeConnection[i].y]);

			edgeVertex[i] = pos + (vertexOffset[edgeConnection[i].x] + offset * edgeDirection[i]);
		}
	}

	float3 size = float3(_Width - 1, _Height - 1, _Depth - 1);

	int idx = id.x + id.y * _Width + id.z * _Width * _Height;

	//Save the triangles that were found. There can be up to five per cube
	for (i = 0; i < 5; i++)
	{
		//If the connection table is not -1 then this a triangle.
		if (_TriangleConnectionTable[flagIndex * 16 + 3 * i] >= 0)
		{
			float3 position;

			position = edgeVertex[_TriangleConnectionTable[flagIndex * 16 + (3 * i + 0)]];
			_Buffer[idx * 15 + (3 * i + 0)] = CreateVertex(position, centre, size);

			position = edgeVertex[_TriangleConnectionTable[flagIndex * 16 + (3 * i + 1)]];
			_Buffer[idx * 15 + (3 * i + 1)] = CreateVertex(position, centre, size);

			position = edgeVertex[_TriangleConnectionTable[flagIndex * 16 + (3 * i + 2)]];
			_Buffer[idx * 15 + (3 * i + 2)] = CreateVertex(position, centre, size);
		}
	}

}
